CREATE TABLE races (
	id integer PRIMARY KEY AUTOINCREMENT,
	name text NOT NULL,
	start_date text,
	finish_date text,
	location text,
	is_deleted BOOLEAN NOT NULL DEFAULT false
) AS Race;

CREATE TABLE stages (
	id integer PRIMARY KEY AUTOINCREMENT,
	trail_id integer,
	race_id integer NOT NULL,
	name text NOT NULL,
	is_active BOOLEAN NOT NULL DEFAULT true,
	is_deleted BOOLEAN NOT NULL DEFAULT false,
    FOREIGN KEY (trail_id) REFERENCES trails(id),
    FOREIGN KEY (race_id) REFERENCES races(id)
);

CREATE TABLE riders (
	id integer PRIMARY KEY AUTOINCREMENT,
	name text NOT NULL,
	nickname text,
	birthday text,
	team text,
	city text,
	email text,
	phone text,
	comment text
);

CREATE TABLE statuses (
	id integer PRIMARY KEY AUTOINCREMENT,
	type text NOT NULL
) AS Status;

CREATE TABLE participants (
	id integer PRIMARY KEY AUTOINCREMENT,
	race_id integer NOT NULL,
	rider_id integer NOT NULL,
	number integer NOT NULL,
	category text, /* может быть NULL для быстрого добавления номера на старте */
	rfid text,
	status_id integer NOT NULL DEFAULT 1,
    FOREIGN KEY (rider_id) REFERENCES riders(id),
    FOREIGN KEY (race_id) REFERENCES races(id)
);

CREATE TABLE starts (
	id integer PRIMARY KEY AUTOINCREMENT,
	stage_id integer NOT NULL,
	participant_id integer NOT NULL,
	start_time text NOT NULL,
	timestamp text,
	automatic_start_time text,
	automatic_correction integer,
	manual_start_time text,
	manual_correction integer,
	status_id integer NOT NULL DEFAULT 1,
	finish_id integer,
    FOREIGN KEY (stage_id) REFERENCES stages(id),
    FOREIGN KEY (participant_id) REFERENCES participants(id),
	FOREIGN KEY (finish_id) REFERENCES finishes(id)
);

CREATE TABLE finishes (
	id integer PRIMARY KEY AUTOINCREMENT,
	stage_id integer NOT NULL,
	number integer,
	timestamp text,
	finish_time text,
	is_hidden BOOLEAN NOT NULL DEFAULT false,
	is_manual BOOLEAN NOT NULL DEFAULT false,
    FOREIGN KEY (stage_id) REFERENCES stages(id)
) AS Finish;

CREATE TABLE trails (
	id integer PRIMARY KEY AUTOINCREMENT,
	name text NOT NULL,
	distance integer,
	elevation integer,
	gpx_track blob,
	link text,
	comment text
);

getRaces: SELECT * FROM races WHERE is_deleted = false;

addRace:
INSERT INTO races (name, start_date, finish_date, location)
VALUES (:name, :start_date, :finish_date, :location);

deleteRace: UPDATE races SET is_deleted = true WHERE id = :id;

getStages: SELECT * FROM stages WHERE race_id = :race_id AND is_deleted = false;
addStage: INSERT INTO stages (trail_id, race_id, name) VALUES (:trail_id, :race_id, :name);
deleteStage: UPDATE stages SET is_deleted = true WHERE id = :id;

getNumberAtStarts:
SELECT *
FROM starts, participants
WHERE
    participants.id = starts.participant_id
    AND starts.stage_id = :stage_id
    AND participants.number = :number;




-- Old protocol
getParticipantsAtStart:
SELECT
	participants.rider_id as rider_id,
	participants.race_id as race_id,
	participants.number as number,
	participants.category as category,
	participants.rfid as rfid,
	participants.status_id as participant_status_id,
	riders.name as name,
	riders.nickname as nickname,
	riders.birthday as birthday,
	riders.team as team,
	riders.city as city,
	riders.email as email,
	riders.phone as phone,
	riders.comment as comment,
	starts.id as start_id,
	starts.stage_id as stage_id,
	starts.participant_id as participant_id,
	starts.start_time as start_time,
	starts.timestamp as timestamp,
	starts.automatic_start_time as automatic_start_time,
	starts.automatic_correction as automatic_correction,
	starts.manual_start_time as manual_start_time,
	starts.manual_correction as manual_correction,
	starts.status_id as status_id
FROM participants, riders, starts
WHERE 
	participants.rider_id = riders.id
    AND starts.participant_id = participants.id
	AND stage_id = :stage_id
	AND starts.status_id = 1
	AND participants.status_id = 1
ORDER BY start_time ASC;

getExistedStartingParticipants:
SELECT *
FROM starts, participants
WHERE 
	starts.participant_id = participants.id
	AND stage_id = :stage_id
	AND (start_time IS :start_time
    	OR (number IS :number
      	AND (automatic_start_time NOTNULL OR manual_start_time NOTNULL)));

setStartingInfo:
UPDATE starts
SET start_time = :start_time,
	automatic_start_time = :automatic_start_time,
    automatic_correction = :automatic_correction,
    manual_start_time = :manual_start_time,
    manual_correction = :manual_correction
WHERE
	stage_id = :stage_id
	AND participant_id = :participant_id;

getParticipantAroundTime:
SELECT *
FROM starts
WHERE
	stage_id = :stage_id
	AND start_time BETWEEN :before AND :after;

setManualStartTime:
UPDATE starts
SET
	manual_start_time = :manual_start_time,
	manual_correction = :manual_correction
WHERE
	participant_id = :participant_id
	AND stage_id = :stage_id;

getNextStartingParticipants:
SELECT 
	participants.number as number,
  	starts.start_time as start_time,
	starts.automatic_start_time as automatic_start_time,
	starts.automatic_correction as automatic_correction,
	starts.manual_start_time as manual_start_time
FROM
	starts, participants
WHERE starts.participant_id = participants.id
	AND starts.stage_id = :stage_id
	AND start_time > :time
	AND automatic_start_time ISNULL
	AND manual_start_time ISNULL
	AND participants.status_id = 1
	AND starts.status_id = 1
ORDER BY start_time ASC;

getForBeep:
SELECT COUNT(*) FROM starts
WHERE
	starts.stage_id = :stage_id
	AND start_time BETWEEN :beepTime AND :afterTime
  	AND automatic_start_time ISNULL
	AND status_id = 1;

getStartingParticipantAndFollowing:
SELECT
	participants.number as number,
	starts.start_time as start_time,
	starts.automatic_start_time as automatic_start_time,
	starts.automatic_correction as automatic_correction,
	riders.name as name
FROM
	starts, participants, riders
WHERE
	starts.participant_id = participants.id
	AND participants.rider_id = riders.id
	AND starts.stage_id = :stage_id
	AND (start_time BETWEEN :time AND :after)
	AND automatic_start_time ISNULL
	AND starts.status_id = 1;

getNumbersOnTraceNow:
SELECT *
FROM starts, participants
WHERE
    starts.participant_id = participants.id
    AND starts.stage_id = :stage_id
    AND julianday(time(:time_now)) > julianday(time(starts.start_time))
    AND starts.finish_id ISNULL
    AND (starts.automatic_start_time NOT LIKE 'DNS'
        OR starts.automatic_start_time ISNULL)
ORDER BY starts.start_time ASC;

getLastFinishTime:
SELECT finish_time
FROM finishes
WHERE
    stage_id = :stage_id
    AND is_hidden = false
    AND is_manual = false
ORDER BY finish_time DESC LIMIT 1;

getLastFinishTimeWithNumber:
SELECT finish_time
FROM finishes
WHERE
    stage_id = :stage_id
    AND number NOTNULL
    AND finish_time NOT like 'DNS'
    AND finish_time NOT like 'DNF'
ORDER BY finish_time DESC LIMIT 1;

_addFinishTime:
INSERT INTO finishes (stage_id, finish_time, timestamp, number, is_hidden)
VALUES (:stage_id, :finish_time, :timestamp, :number, :is_hidden);

_setFinishInfoToStart:
UPDATE starts
SET finish_id = :finish_id
FROM (SELECT id, number FROM participants WHERE race_id = :race_id ) as p
WHERE
    starts.participant_id = p.id
    AND stage_id = :stage_id
    AND p.number = :number;

_addFinishTimeManual:
INSERT INTO finishes (stage_id, finish_time, timestamp, number, is_manual)
VALUES (:stage_id, :finish_time, :finish_time, :number, true);

_hideFinish:
UPDATE finishes SET is_hidden = true WHERE id = :id;

_hideAllFinishes:
UPDATE finishes SET is_hidden = true;

_getNumberAtFinishes:
SELECT *
FROM finishes
WHERE
    stage_id = :stage_id
    AND number = :number;

_setNumberToFinish:
UPDATE finishes
SET number = :number
WHERE id = :id;

/*
_clearNumberAtFinish:
UPDATE finishes
SET number = :number
WHERE id = :id;
*/

_setStatusForNumberAtStage:
UPDATE starts
SET status_id = :status_id
FROM (SELECT id, number FROM participants WHERE race_id = :race_id ) as p
WHERE
    starts.participant_id = p.id
    AND stage_id = :stage_id
    AND p.number = :number;

/*
getStartForCsv:
SELECT participants.number as number,
	starts.start_time,
	IFNULL (starts.automatic_correction, IFNULL (starts.manual_correction, 'DNS')) starts.automatic_correction as automatic_correction
FROM starts, participants
WHERE
	starts.participant_id = participants.id
	AND starts.stage_id = :stage_id
	AND start_time NOTNULL
	AND	(automatic_correction NOT NULL
    	OR manual_correction NOT NULL
       	OR automatic_start_time IS 'DNS')
ORDER BY starttime ASC;
*/