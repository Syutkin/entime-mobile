// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    races,
    trackFiles,
    trails,
    stages,
    riders,
    statuses,
    participants,
    finishes,
    starts,
    logs,
  ];
  late final Shape0 races = Shape0(
    source: i0.VersionedTable(
      entityName: 'races',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 trackFiles = Shape1(
    source: i0.VersionedTable(
      entityName: 'track_files',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_8,
        _column_9,
        _column_6,
        _column_10,
        _column_11,
        _column_12,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 trails = Shape2(
    source: i0.VersionedTable(
      entityName: 'trails',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'FOREIGN KEY(file_id)REFERENCES track_files(id)ON DELETE SET NULL',
      ],
      columns: [
        _column_0,
        _column_1,
        _column_13,
        _column_14,
        _column_15,
        _column_5,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 stages = Shape3(
    source: i0.VersionedTable(
      entityName: 'stages',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'FOREIGN KEY(trail_id)REFERENCES trails(id)ON DELETE SET NULL',
        'FOREIGN KEY(race_id)REFERENCES races(id)ON DELETE CASCADE',
      ],
      columns: [
        _column_0,
        _column_16,
        _column_17,
        _column_1,
        _column_6,
        _column_18,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 riders = Shape4(
    source: i0.VersionedTable(
      entityName: 'riders',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_19,
        _column_20,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 statuses = Shape5(
    source: i0.VersionedTable(
      entityName: 'statuses',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_27],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape6 participants = Shape6(
    source: i0.VersionedTable(
      entityName: 'participants',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'FOREIGN KEY(rider_id)REFERENCES riders(id)',
        'FOREIGN KEY(race_id)REFERENCES races(id)ON DELETE CASCADE',
        'FOREIGN KEY(status_id)REFERENCES statuses(id)',
      ],
      columns: [
        _column_0,
        _column_17,
        _column_28,
        _column_29,
        _column_30,
        _column_31,
        _column_32,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape7 finishes = Shape7(
    source: i0.VersionedTable(
      entityName: 'finishes',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'FOREIGN KEY(stage_id)REFERENCES stages(id)ON DELETE CASCADE',
      ],
      columns: [
        _column_0,
        _column_33,
        _column_34,
        _column_12,
        _column_35,
        _column_36,
        _column_37,
        _column_38,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape8 starts = Shape8(
    source: i0.VersionedTable(
      entityName: 'starts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [
        'FOREIGN KEY(stage_id)REFERENCES stages(id)ON DELETE CASCADE',
        'FOREIGN KEY(participant_id)REFERENCES participants(id)',
        'FOREIGN KEY(finish_id)REFERENCES finishes(id)',
        'FOREIGN KEY(status_id)REFERENCES statuses(id)',
      ],
      columns: [
        _column_0,
        _column_33,
        _column_39,
        _column_40,
        _column_41,
        _column_42,
        _column_43,
        _column_44,
        _column_45,
        _column_46,
        _column_47,
        _column_32,
        _column_48,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape9 logs = Shape9(
    source: i0.VersionedTable(
      entityName: 'logs',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_49,
        _column_12,
        _column_50,
        _column_51,
        _column_52,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get startDate =>
      columnsByName['start_date']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get finishDate =>
      columnsByName['finish_date']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get location =>
      columnsByName['location']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get url =>
      columnsByName['url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'PRIMARY KEY NOT NULL',
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'start_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'finish_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'location',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'url',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<bool> _column_7(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_deleted',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL DEFAULT FALSE',
      defaultValue: const CustomExpression('FALSE'),
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get extension =>
      columnsByName['extension']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get size =>
      columnsByName['size']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get hashSha1 =>
      columnsByName['hash_sha1']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<i2.Uint8List> get data =>
      columnsByName['data']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'extension',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'size',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'hash_sha1',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<i2.Uint8List> _column_11(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'data',
      aliasedName,
      false,
      type: i1.DriftSqlType.blob,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<DateTime> _column_12(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'timestamp',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      $customConstraints: 'NOT NULL',
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get distance =>
      columnsByName['distance']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get elevation =>
      columnsByName['elevation']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get fileId =>
      columnsByName['file_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get url =>
      columnsByName['url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'distance',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_14(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'elevation',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_15(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'file_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get trailId =>
      columnsByName['trail_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get raceId =>
      columnsByName['race_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isActive =>
      columnsByName['is_active']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_16(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'trail_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'race_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<bool> _column_18(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_active',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL DEFAULT TRUE',
      defaultValue: const CustomExpression('TRUE'),
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get nickname =>
      columnsByName['nickname']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get birthday =>
      columnsByName['birthday']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get team =>
      columnsByName['team']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get city =>
      columnsByName['city']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phone =>
      columnsByName['phone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get comment =>
      columnsByName['comment']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL COLLATE NOCASE',
    );
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'nickname',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'birthday',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'team',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'city',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'email',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'phone',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_26(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'comment',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_27(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get raceId =>
      columnsByName['race_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get riderId =>
      columnsByName['rider_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get number =>
      columnsByName['number']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get category =>
      columnsByName['category']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get rfid =>
      columnsByName['rfid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get statusId =>
      columnsByName['status_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_28(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'rider_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<int> _column_29(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'number',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_30(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'rfid',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_32(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'status_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL DEFAULT 1',
      defaultValue: const CustomExpression('1'),
    );

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get stageId =>
      columnsByName['stage_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get number =>
      columnsByName['number']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get ntpOffset =>
      columnsByName['ntp_offset']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get finishTime =>
      columnsByName['finish_time']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isHidden =>
      columnsByName['is_hidden']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isManual =>
      columnsByName['is_manual']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_33(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'stage_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<int> _column_34(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'number',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_35(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'ntp_offset',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_36(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'finish_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<bool> _column_37(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_hidden',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL DEFAULT FALSE',
      defaultValue: const CustomExpression('FALSE'),
    );
i1.GeneratedColumn<bool> _column_38(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_manual',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      $customConstraints: 'NOT NULL DEFAULT FALSE',
      defaultValue: const CustomExpression('FALSE'),
    );

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get stageId =>
      columnsByName['stage_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get participantId =>
      columnsByName['participant_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get startTime =>
      columnsByName['start_time']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get timestampCorrection =>
      columnsByName['timestamp_correction']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get ntpOffset =>
      columnsByName['ntp_offset']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get automaticStartTime =>
      columnsByName['automatic_start_time']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get automaticCorrection =>
      columnsByName['automatic_correction']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get manualStartTime =>
      columnsByName['manual_start_time']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get manualCorrection =>
      columnsByName['manual_correction']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get statusId =>
      columnsByName['status_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get finishId =>
      columnsByName['finish_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_39(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'participant_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_40(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'start_time',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<DateTime> _column_41(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'timestamp',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_42(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'timestamp_correction',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_43(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'ntp_offset',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_44(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'automatic_start_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_45(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'automatic_correction',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<String> _column_46(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'manual_start_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_47(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'manual_correction',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );
i1.GeneratedColumn<int> _column_48(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'finish_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      $customConstraints: '',
    );

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get level =>
      columnsByName['level']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get source =>
      columnsByName['source']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get direction =>
      columnsByName['direction']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get rawData =>
      columnsByName['raw_data']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_49(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'level',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_50(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'source',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_51(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'direction',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      $customConstraints: 'NOT NULL',
    );
i1.GeneratedColumn<String> _column_52(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'raw_data',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      $customConstraints: '',
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from1To2: from1To2),
);
