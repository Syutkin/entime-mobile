name: Flutter TAG test

on:
  push:
    tags:
      - 'test*'

jobs:
  build:
    name: Test, build and prerelease APK
    runs-on: ubuntu-latest

    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-java@v2
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#
#      - uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable' # or: 'beta', 'dev' or 'master'
#          cache: true

      - name: Get tag name
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          if [[ ${{ env.RELEASE_VERSION }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "IS_RELEASE=true" >> $GITHUB_ENV
          fi

#      - name: Get signing key
#        run: echo $SIGNING_KEY | base64 -d > android/app/key.jks
#        env:
#          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
#
#      - run: java --version
#      - run: flutter doctor -v
#
#      - name: Install dependencies
#        run: flutter pub get

#      - name: Generate with build_runner
#        run: flutter pub run build_runner build --delete-conflicting-outputs

#      - name: Analyze project source
#        run: flutter analyze --no-fatal-infos

#      - name: Run tests and collect coverage
#        run: flutter test --coverage test/
#
#      - name: Clean coverage
#        run: |
#          sudo apt-get -y install lcov
#          lcov -r coverage/lcov.info -o coverage/lcov.info "lib/**.freezed.dart" "lib/**.g.dart" "lib/src/common/localization/**.dart" "test/**.mocks.dart"
#
#      - name: Upload to Codecov
#        uses: codecov/codecov-action@v4
#        env:
#          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

#      - name: Build APK
#        run: flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi
#        env:
#          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
#          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
#          ALIAS: ${{ secrets.ALIAS }}
#          KEY_PATH: key.jks
#
#      - name: Rename APK
#        run: |
#          for f in build/app/outputs/flutter-apk/app*; do mv "$f" "$(echo "$f" | sed s/-release//)"; done
#          for f in build/app/outputs/flutter-apk/app*; do mv "$f" "$(echo "$f" | sed s/app/entime-${{ env.RELEASE_VERSION }}/)"; done


#      - name: Check Tag
#        id: check-tag
#        run: |
#          if [[ ${{ env.RELEASE_VERSION }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
#              echo "match=true" >> $GITHUB_OUTPUT
#          fi

      - name: release
        if: env.IS_RELEASE == 'true'
        run: |
          echo "Tag is a release"

      - name: pre
        if: env.IS_RELEASE == 'false'
        run: |
          echo "Tag is a pre"
          


#      - name: Create a release
#        uses: ncipollo/release-action@v1
#        with:
#          artifacts: "build/app/outputs/flutter-apk/entime*.apk,build/app/outputs/flutter-apk/entime*.sha1"
#          if: ${{ github.ref_name == 'test*' }}
#          prerelease: true
#          token: ${{ secrets.TOKEN }}