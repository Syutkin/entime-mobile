# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
#include: package:flutter_lints/flutter.yaml
include: package:very_good_analysis/analysis_options.yaml

formatter:
  page_width: 120

analyzer:
  exclude:
    - '**/*.g.dart'
    - '**/*.freezed.dart'
    - lib/src/common/localization/generated/**
  errors:
    invalid_annotation_target: ignore
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
  plugins:
    - drift

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/tools/linter-rules.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    always_use_package_imports: false
    avoid_catches_without_on_clauses: false
    avoid_print: true
    document_ignores: false
    flutter_style_todos: false
    lines_longer_than_80_chars: false
    one_member_abstracts: false
    public_member_api_docs: false

# Additional information about this file can be found at
# https://dart.dev/tools/analysis