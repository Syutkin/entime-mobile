// Mocks generated by Mockito 5.4.4 from annotations
// in entime/test/src/feature/bluetooth/logic/bluetooth_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBluetoothState_0 extends _i1.SmartFake
    implements _i2.BluetoothState {
  _FakeBluetoothState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBluetoothBondState_1 extends _i1.SmartFake
    implements _i2.BluetoothBondState {
  _FakeBluetoothBondState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlutterBluetoothSerial].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterBluetoothSerial extends _i1.Mock
    implements _i2.FlutterBluetoothSerial {
  MockFlutterBluetoothSerial() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool?> get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> get isOn => (super.noSuchMethod(
        Invocation.getter(#isOn),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<_i2.BluetoothState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.Future<_i2.BluetoothState>.value(_FakeBluetoothState_0(
          this,
          Invocation.getter(#state),
        )),
      ) as _i3.Future<_i2.BluetoothState>);

  @override
  _i3.Future<String?> get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<String?> get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<bool?> get isDiscovering => (super.noSuchMethod(
        Invocation.getter(#isDiscovering),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> get isDiscoverable => (super.noSuchMethod(
        Invocation.getter(#isDiscoverable),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Stream<_i2.BluetoothState> onStateChanged() => (super.noSuchMethod(
        Invocation.method(
          #onStateChanged,
          [],
        ),
        returnValue: _i3.Stream<_i2.BluetoothState>.empty(),
      ) as _i3.Stream<_i2.BluetoothState>);

  @override
  _i3.Future<bool?> changeName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #changeName,
          [name],
        ),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> requestEnable() => (super.noSuchMethod(
        Invocation.method(
          #requestEnable,
          [],
        ),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> requestDisable() => (super.noSuchMethod(
        Invocation.method(
          #requestDisable,
          [],
        ),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<void> openSettings() => (super.noSuchMethod(
        Invocation.method(
          #openSettings,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.BluetoothBondState> getBondStateForAddress(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBondStateForAddress,
          [address],
        ),
        returnValue:
            _i3.Future<_i2.BluetoothBondState>.value(_FakeBluetoothBondState_1(
          this,
          Invocation.method(
            #getBondStateForAddress,
            [address],
          ),
        )),
      ) as _i3.Future<_i2.BluetoothBondState>);

  @override
  _i3.Future<bool?> bondDeviceAtAddress(
    String? address, {
    String? pin,
    bool? passkeyConfirm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #bondDeviceAtAddress,
          [address],
          {
            #pin: pin,
            #passkeyConfirm: passkeyConfirm,
          },
        ),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<bool?> removeDeviceBondWithAddress(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeDeviceBondWithAddress,
          [address],
        ),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  void setPairingRequestHandler(
          _i3.Future<dynamic> Function(_i2.BluetoothPairingRequest)? handler) =>
      super.noSuchMethod(
        Invocation.method(
          #setPairingRequestHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<List<_i2.BluetoothDevice>> getBondedDevices() =>
      (super.noSuchMethod(
        Invocation.method(
          #getBondedDevices,
          [],
        ),
        returnValue: _i3.Future<List<_i2.BluetoothDevice>>.value(
            <_i2.BluetoothDevice>[]),
      ) as _i3.Future<List<_i2.BluetoothDevice>>);

  @override
  _i3.Stream<_i2.BluetoothDiscoveryResult> startDiscovery() =>
      (super.noSuchMethod(
        Invocation.method(
          #startDiscovery,
          [],
        ),
        returnValue: _i3.Stream<_i2.BluetoothDiscoveryResult>.empty(),
      ) as _i3.Stream<_i2.BluetoothDiscoveryResult>);

  @override
  _i3.Future<void> cancelDiscovery() => (super.noSuchMethod(
        Invocation.method(
          #cancelDiscovery,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int?> requestDiscoverable(int? durationInSeconds) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestDiscoverable,
          [durationInSeconds],
        ),
        returnValue: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);

  @override
  _i3.Future<void> connect(_i2.BluetoothDevice? device) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [device],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> connectToAddress(String? address) => (super.noSuchMethod(
        Invocation.method(
          #connectToAddress,
          [address],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> write(String? message) => (super.noSuchMethod(
        Invocation.method(
          #write,
          [message],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> writeBytes(_i4.Uint8List? message) => (super.noSuchMethod(
        Invocation.method(
          #writeBytes,
          [message],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
