// Mocks generated by Mockito 5.3.0 from annotations
// in entime/test/app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i7;

import 'package:entime/src/feature/app_info/logic/app_info_provider.dart'
    as _i5;
import 'package:entime/src/feature/audio/logic/audio_service.dart' as _i9;
import 'package:entime/src/feature/bluetooth/bluetooth.dart' as _i3;
import 'package:entime/src/feature/settings/settings.dart' as _i4;
import 'package:entime/src/feature/update/logic/update_provider.dart' as _i6;
import 'package:entime/src/feature/update/model/show_changelog.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeShowChangelog_0 extends _i1.SmartFake implements _i2.ShowChangelog {
  _FakeShowChangelog_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFlutterBluetoothSerial_1 extends _i1.SmartFake
    implements _i3.FlutterBluetoothSerial {
  _FakeFlutterBluetoothSerial_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIBluetoothBackgroundConnection_2 extends _i1.SmartFake
    implements _i3.IBluetoothBackgroundConnection {
  _FakeIBluetoothBackgroundConnection_2(
      Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAppSettings_3 extends _i1.SmartFake implements _i4.AppSettings {
  _FakeAppSettings_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [AppInfoProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppInfoProvider extends _i1.Mock implements _i5.AppInfoProvider {
  MockAppInfoProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get appName =>
      (super.noSuchMethod(Invocation.getter(#appName), returnValue: '')
          as String);
  @override
  String get buildNumber =>
      (super.noSuchMethod(Invocation.getter(#buildNumber), returnValue: '')
          as String);
  @override
  String get packageName =>
      (super.noSuchMethod(Invocation.getter(#packageName), returnValue: '')
          as String);
  @override
  String get version =>
      (super.noSuchMethod(Invocation.getter(#version), returnValue: '')
          as String);
  @override
  List<String?> get deviceSupported32BitAbis =>
      (super.noSuchMethod(Invocation.getter(#deviceSupported32BitAbis),
          returnValue: <String?>[]) as List<String?>);
  @override
  List<String?> get deviceSupported64BitAbis =>
      (super.noSuchMethod(Invocation.getter(#deviceSupported64BitAbis),
          returnValue: <String?>[]) as List<String?>);
  @override
  List<String?> get deviceSupportedAbis =>
      (super.noSuchMethod(Invocation.getter(#deviceSupportedAbis),
          returnValue: <String?>[]) as List<String?>);
}

/// A class which mocks [UpdateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProvider extends _i1.Mock implements _i6.UpdateProvider {
  MockUpdateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get latestVersion =>
      (super.noSuchMethod(Invocation.getter(#latestVersion), returnValue: '')
          as String);
  @override
  void setDownloadingHandler(_i6.DownloadHandler? callback) =>
      super.noSuchMethod(Invocation.method(#setDownloadingHandler, [callback]),
          returnValueForMissingStub: null);
  @override
  void onDownloadComplete(_i7.VoidCallback? callback) =>
      super.noSuchMethod(Invocation.method(#onDownloadComplete, [callback]),
          returnValueForMissingStub: null);
  @override
  void onError(_i6.ErrorHandler? error) =>
      super.noSuchMethod(Invocation.method(#onError, [error]),
          returnValueForMissingStub: null);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
  @override
  _i8.Future<bool> isUpdateAvailable() =>
      (super.noSuchMethod(Invocation.method(#isUpdateAvailable, []),
          returnValue: _i8.Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<void> downloadUpdate() => (super.noSuchMethod(
      Invocation.method(#downloadUpdate, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> installApk() => (super.noSuchMethod(
      Invocation.method(#installApk, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i2.ShowChangelog> showChangelog() => (super.noSuchMethod(
          Invocation.method(#showChangelog, []),
          returnValue: _i8.Future<_i2.ShowChangelog>.value(_FakeShowChangelog_0(
              this, Invocation.method(#showChangelog, []))))
      as _i8.Future<_i2.ShowChangelog>);
}

/// A class which mocks [IBluetoothProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockIBluetoothProvider extends _i1.Mock
    implements _i3.IBluetoothProvider {
  MockIBluetoothProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FlutterBluetoothSerial get flutterBluetoothSerial =>
      (super.noSuchMethod(Invocation.getter(#flutterBluetoothSerial),
              returnValue: _FakeFlutterBluetoothSerial_1(
                  this, Invocation.getter(#flutterBluetoothSerial)))
          as _i3.FlutterBluetoothSerial);
  @override
  _i3.IBluetoothBackgroundConnection get bluetoothBackgroundConnection =>
      (super.noSuchMethod(Invocation.getter(#bluetoothBackgroundConnection),
              returnValue: _FakeIBluetoothBackgroundConnection_2(
                  this, Invocation.getter(#bluetoothBackgroundConnection)))
          as _i3.IBluetoothBackgroundConnection);
  @override
  _i8.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i1.Mock implements _i9.AudioService {
  MockAudioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> countdown() => (super.noSuchMethod(
      Invocation.method(#countdown, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> speak(String? text) => (super.noSuchMethod(
      Invocation.method(#speak, [text]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [SharedPrefsSettingsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefsSettingsProvider extends _i1.Mock
    implements _i4.SharedPrefsSettingsProvider {
  MockSharedPrefsSettingsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AppSettings get settings => (super.noSuchMethod(
          Invocation.getter(#settings),
          returnValue: _FakeAppSettings_3(this, Invocation.getter(#settings)))
      as _i4.AppSettings);
  @override
  _i8.Stream<_i4.AppSettings> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _i8.Stream<_i4.AppSettings>.empty())
          as _i8.Stream<_i4.AppSettings>);
  @override
  _i8.Future<void> update(_i4.AppSettings? settings) => (super.noSuchMethod(
      Invocation.method(#update, [settings]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i4.AppSettings getDefaults() =>
      (super.noSuchMethod(Invocation.method(#getDefaults, []),
              returnValue:
                  _FakeAppSettings_3(this, Invocation.method(#getDefaults, [])))
          as _i4.AppSettings);
  @override
  _i8.Future<void> setDefaults() => (super.noSuchMethod(
      Invocation.method(#setDefaults, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> dispose() => (super.noSuchMethod(
      Invocation.method(#dispose, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}
